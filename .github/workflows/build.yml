name: Build Patched YTDL

on:
  push:
    paths:
      - youtube_dl/**
      - test/**
      - docker/**
      - .github/workflows/build.yml
      - Makefile
    branches:
      - master
  pull_request: {}
  workflow_dispatch:
    inputs: {}

env:
  python_version: 3.9
  windows_icon: red
  ZOPFLI_ITERATIONS: 40

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      latest_version: ${{ steps.prepare.outputs.latest_version }}
      latest_version_numeric: ${{ steps.prepare.outputs.latest_version_numeric }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python ${{ env.python_version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python_version }}
      - name: Install deps
        run: |
          sudo ln -fs /usr/share/zoneinfo/Etc/UTC /etc/localtime
          sudo apt update
          sudo env DEBIAN_FRONTEND=noninteractive apt install -y tzdata
      - name: Prepare files
        id: prepare
        run: |
          mkdir artifacts
          export NOW_RAW="$(date)"
          export LATEST_VERSION="$(date --date="${NOW_RAW}" +'%Y.%m.%d.%s')"
          echo "${LATEST_VERSION}" > artifacts/LATEST_VERSION
          echo "::set-output name=latest_version::${LATEST_VERSION}"
          echo "::set-output name=latest_version_numeric::$(date --date="${NOW_RAW}" +'%s')"

          echo "from __future__ import unicode_literals
          __version__ = '${LATEST_VERSION}'
          " > youtube_dl/version.py
          python ./devscripts/make_buildconfig.py
      - name: Upload artifacts for the next steps
        uses: actions/upload-artifact@v2
        with:
          name: ytdl-base
          path: |
            youtube_dl/version.py
            youtube_dl/build_config.py
            artifacts/
  build-linux:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - uses: actions/checkout@v2
      - name: Download base
        uses: actions/download-artifact@v2
        with:
          name: ytdl-base
      - name: Set up Python ${{ env.python_version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python_version }}
      - name: Install deps
        run: |
          sudo ln -fs /usr/share/zoneinfo/Etc/UTC /etc/localtime
          sudo apt update
          sudo env DEBIAN_FRONTEND=noninteractive apt install -y curl zip make git gawk pandoc tzdata p7zip-full
          brew install nao20010128nao/my/advcomp
      - name: Build patched YTDL for Linux
        run: |
          make youtube-dl youtube-dl.tar.gz
          mv youtube-dl artifacts/
          mv youtube-dl.tar.gz artifacts/
      - name: Upload artifacts for the next steps
        uses: actions/upload-artifact@v2
        with:
          name: ytdl-linux
          # README.md (or any other files in the repo) is required
          # to prevent upload-artifacts to find LCA
          path: |
            artifacts/
            README.md
  build-windows:
    runs-on: windows-latest
    needs: prepare
    strategy:
      matrix:
        icon: [red, white]
        # pyinstaller: ['-m PyInstaller', 'devscripts/pyinstaller_zopfli.py']
    steps:
      - uses: actions/checkout@v2
      - name: Download base
        uses: actions/download-artifact@v2
        with:
          name: ytdl-base
      - name: Set up Python ${{ env.python_version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python_version }}
      - name: Install deps
        # :tada: https://github.com/pyinstaller/pyinstaller/releases/tag/v4.2
        run: pip install --upgrade pyinstaller zopflipy websocket_client
      - name: Install UPX
        run: choco install upx
      - name: Build patched YTDL for Windows
        shell: pwsh
        run: |
          python -OO devscripts/pyinstaller_zopfli.py `
              --onefile --console --distpath . `
              --icon icons\youtube_social_squircle_${{ matrix.icon }}.ico `
              -n youtube-dl youtube_dl\__main__.py
          Move-Item youtube-dl.exe artifacts/
      - name: Upload artifacts for the next steps
        uses: actions/upload-artifact@v2
        with:
          name: "ytdl-windows-${{ matrix.icon }}"
          # README.md (or any other files in the repo) is required
          # to prevent upload-artifacts to find LCA
          path: |
            artifacts/
            README.md
  prepare-artifacts:
    runs-on: ubuntu-latest
    needs: [prepare, build-linux, build-windows]
    if: ${{ github.event_name != 'pull_request' }}
    outputs:
      filehash_bin: ${{ steps.hash-and-versions.outputs.filehash_bin }}
      filehash_exe: ${{ steps.hash-and-versions.outputs.filehash_exe }}
      filehash_tar: ${{ steps.hash-and-versions.outputs.filehash_tar }}
    steps:
      - name: Download builds for Linux
        uses: actions/download-artifact@v2
        with:
          name: ytdl-linux
      - name: Download builds for Windows
        uses: actions/download-artifact@v2
        with:
          name: ytdl-windows-${{ env.windows_icon }}
      - name: Install deps
        run: |
          sudo apt update
          sudo env DEBIAN_FRONTEND=noninteractive apt install -y jq
      - name: Prepare artifacts
        id: hash-and-versions
        run: |
          FILEHASH_BIN="$(sha256sum artifacts/youtube-dl        | awk '{print $1}')"
          FILEHASH_TAR="$(sha256sum artifacts/youtube-dl.tar.gz | awk '{print $1}')"
          FILEHASH_EXE="$(sha256sum artifacts/youtube-dl.exe    | awk '{print $1}')"
          echo "::set-output name=filehash_bin::${FILEHASH_BIN}"
          echo "::set-output name=filehash_tar::${FILEHASH_TAR}"
          echo "::set-output name=filehash_exe::${FILEHASH_EXE}"
          echo '{"versions":{}}' | jq ".latest=\"${{ needs.prepare.outputs.latest_version }}\"" \
            | jq ".versions[\"${{ needs.prepare.outputs.latest_version }}\"].bin=[\"https://github.com/nao20010128nao/ytdl-patched/releases/download/${{ needs.prepare.outputs.latest_version_numeric }}/youtube-dl\",\"${FILEHASH_BIN}\"]" \
            | jq ".versions[\"${{ needs.prepare.outputs.latest_version }}\"].tar=[\"https://github.com/nao20010128nao/ytdl-patched/releases/download/${{ needs.prepare.outputs.latest_version_numeric }}/youtube-dl.tar.gz\",\"${FILEHASH_TAR}\"]" \
            | jq ".versions[\"${{ needs.prepare.outputs.latest_version }}\"].exe=[\"https://github.com/nao20010128nao/ytdl-patched/releases/download/${{ needs.prepare.outputs.latest_version_numeric }}/youtube-dl-${{ env.windows_icon }}.exe\",\"${FILEHASH_EXE}\"]" \
            | tee artifacts/versions.json
      - name: Upload artifacts for the next steps
        uses: actions/upload-artifact@v2
        with:
          name: ytdl-artifacts
          # README.md (or any other files in the repo) is required
          # to prevent upload-artifacts to find LCA
          path: |
            artifacts/
            README.md
  upload-gh-pages:
    needs: prepare-artifacts
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ytdl-artifacts
      - name: Deploy to gh-pages
        uses: JamesIves/github-pages-deploy-action@4.1.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          folder: artifacts
          single-commit: true
  upload-homebrew:
    needs: [prepare, prepare-artifacts]
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    env:
      FILEHASH_TAR: ${{ needs.prepare-artifacts.outputs.filehash_tar }}
      VERSION: ${{ needs.prepare.outputs.latest_version_numeric }}
    steps:
      - name: Upload to my homebrew repository
        run: |
          git config --global user.name nao20010128nao
          git config --global user.email nao20010128@gmail.com
          git clone https://nao20010128nao:${{ secrets.GH_PAT }}@github.com/nao20010128nao/homebrew-my.git
          cd homebrew-my
          echo $FILEHASH_TAR $VERSION
          sed -E -i "s/sha256 \"[0-9a-f]*\"/sha256 \"$FILEHASH_TAR\"/g" Formula/ytdl-patched.rb
          sed -E -i "s/version \".*\"/version \"$VERSION\"/g" Formula/ytdl-patched.rb
          sed -E -i "s^url \".*\"^url \"https://github.com/nao20010128nao/ytdl-patched/releases/download/$VERSION/youtube-dl.tar.gz\"^g" Formula/ytdl-patched.rb
          git add .
          git commit -m "ytdl-patched: $VERSION"
          git push
  upload-releases:
    needs: [prepare, prepare-artifacts]
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ytdl-artifacts
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prepare.outputs.latest_version_numeric }}
          release_name: ${{ needs.prepare.outputs.latest_version }}
          draft: false
          prerelease: false
          body: |
            What to download
            - for Linux/macOS - `youtube-dl` (requires Python 3.x installed)
            - for Windows (no Python 3.x required)
                - red icon - `...-red.exe` (**default** in -U)
                - white icon - `...-white.exe`
      - name: Upload bin
        id: upload-1
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./artifacts/youtube-dl
          asset_name: youtube-dl
          asset_content_type: application/zip
      - name: Upload tar
        id: upload-2
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./artifacts/youtube-dl.tar.gz
          asset_name: youtube-dl.tar.gz
          asset_content_type: application/gzip
      - name: Download builds for Windows (red icon)
        uses: actions/download-artifact@v2
        with:
          name: ytdl-windows-red
      - name: Upload exe
        id: upload-3
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./artifacts/youtube-dl.exe
          asset_name: youtube-dl-red.exe
          asset_content_type: application/vnd.microsoft.portable-executable
      - name: Download builds for Windows (white icon)
        uses: actions/download-artifact@v2
        with:
          name: ytdl-windows-white
      - name: Upload exe
        id: upload-4
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./artifacts/youtube-dl.exe
          asset_name: youtube-dl-white.exe
          asset_content_type: application/vnd.microsoft.portable-executable
  binary-test:
    needs: [build-linux, build-windows]
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      matrix:
        os: [
          "ubuntu-20.04", "ubuntu-18.04", "ubuntu-16.04",
          #"macos-11.0", "macos-10.15",
          "windows-2016", "windows-2019"
        ]
        python_version: [
          "3.9", "3.8", "3.7"
        ]
    steps:
      - name: Download artifacts (Linux/macOS)
        uses: actions/download-artifact@v2
        if: ${{ startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos') }}
        with:
          name: ytdl-linux
      - name: Download artifacts (Windows)
        uses: actions/download-artifact@v2
        if: ${{ startsWith(matrix.os, 'windows') }}
        with:
          name: ytdl-windows-white
      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v1
        if: ${{ startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos') }}
        with:
          python-version: ${{ matrix.python_version }}
      - name: youtube-dl --help and --version
        shell: bash
        run: |
          chmod a+x ./artifacts/youtube-dl || true
          ./artifacts/youtube-dl --help
          ./artifacts/youtube-dl --version
      - name: Download some videos
        shell: bash
        continue-on-error: true
        run: |
          ./artifacts/youtube-dl \
              https://www.youtube.com/watch?v=XEY7UQJxw-o \
              https://twitter.com/twetchapp/status/1311686520793829376
  docker-linux:
    runs-on: ubuntu-latest
    needs: [prepare, build-linux]
    continue-on-error: true
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ytdl-linux
      - run: ls artifacts/
      - name: Login
        uses: docker/login-action@v1
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and Push (alpine)
        uses: docker/build-push-action@v2
        with:
          push: true
          platforms: linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/i386,linux/ppc64le
          file: ./docker/linux.Dockerfile
          context: .
          build-args: |
            base_tag=3-alpine
          tags: |
            nao20010128nao/ytdl-patched:latest
            nao20010128nao/ytdl-patched:alpine
            nao20010128nao/ytdl-patched:${{ needs.prepare.outputs.latest_version_numeric }}
            nao20010128nao/ytdl-patched:${{ needs.prepare.outputs.latest_version_numeric }}-alpine
      - name: Build and Push (slim)
        uses: docker/build-push-action@v2
        with:
          push: true
          platforms: linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/i386,linux/ppc64le
          file: ./docker/linux.Dockerfile
          context: .
          build-args: |
            base_tag=3-slim
          tags: |
            nao20010128nao/ytdl-patched:slim
            nao20010128nao/ytdl-patched:${{ needs.prepare.outputs.latest_version_numeric }}-slim
  docker-windows:
    runs-on: ${{ matrix.windows.os }}
    needs: [prepare, build-windows]
    continue-on-error: true
    if: ${{ github.event_name != 'pull_request' }}
    strategy:
      matrix:
        windows: [
          {os: windows-2019, tag: '1809'},
          {os: windows-2016, tag: ltsc2016},
        ]
    steps:
      - uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ytdl-windows-${{ env.windows_icon }}
      - run: ls artifacts/
      - name: Login
        run: docker login --username ${{ github.repository_owner }} --password ${{ secrets.DHUB_TOKEN }}
      - name: Build and Push (1809)
        if: ${{ matrix.windows.tag == '1809' }}
        run: |
          docker build --build-arg base_tag=3-windowsservercore-1809 `
              -f ./docker/windows.Dockerfile `
              -t nao20010128nao/ytdl-patched:latest `
              -t nao20010128nao/ytdl-patched:windowsservercore-1809 `
              -t nao20010128nao/ytdl-patched:${{ needs.prepare.outputs.latest_version_numeric }} `
              -t nao20010128nao/ytdl-patched:${{ needs.prepare.outputs.latest_version_numeric }}-windowsservercore-1809 `
              .
          docker push nao20010128nao/ytdl-patched:latest
          docker push nao20010128nao/ytdl-patched:windowsservercore-1809
          docker push nao20010128nao/ytdl-patched:${{ needs.prepare.outputs.latest_version_numeric }}
          docker push nao20010128nao/ytdl-patched:${{ needs.prepare.outputs.latest_version_numeric }}-windowsservercore-1809
      - name: Build and Push (ltsc2016)
        if: ${{ matrix.windows.tag == 'ltsc2016' }}
        run: |
          docker build --build-arg base_tag=3-windowsservercore-ltsc2016 `
              -f ./docker/windows.Dockerfile `
              -t nao20010128nao/ytdl-patched:windowsservercore-ltsc2016 `
              -t nao20010128nao/ytdl-patched:${{ needs.prepare.outputs.latest_version_numeric }}-windowsservercore-ltsc2016 `
              .
          docker push nao20010128nao/ytdl-patched:windowsservercore-ltsc2016
          docker push nao20010128nao/ytdl-patched:${{ needs.prepare.outputs.latest_version_numeric }}-windowsservercore-ltsc2016
